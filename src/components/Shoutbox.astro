---
const baseUrl = `${import.meta.env.BASE_URL || '/lama-web/'}`;  // Get the base URL dynamically from Astro config
---

<div id="shoutbox" class="space-y-4"></div>

<form id="shoutboxForm">
  <input type="text" id="messageInput" placeholder="Enter your message" />
  <button type="submit">Send</button>
</form>

<!-- Client-side script -->
<script client:load>
  const baseUrl = 'http://localhost:4321/lama-web/';  // Dynamically pass the base URL from Astro

  let messages = [];
  let newMessage = '';

  // Function to render messages in the shoutbox
  function renderMessages() {
    const shoutboxContainer = document.getElementById('shoutbox');
    if (shoutboxContainer) {
      shoutboxContainer.innerHTML = '';  // Clear existing messages
      messages.forEach((msg) => {
        const messageElement = document.createElement('div');
        messageElement.textContent = `${msg.player_name}: ${msg.message} (${new Date(msg.timestamp).toLocaleTimeString()})`;
        shoutboxContainer.appendChild(messageElement);
      });
    }
  }

  // Function to fetch messages from the API
  function fetchMessages() {
    fetch(`${baseUrl}api/shoutbox`)
      .then((response) => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then((data) => {
        messages = data;  // Store the messages
        renderMessages(); // Manually update the DOM
      })
      .catch((error) => {
        console.error('Error fetching messages:', error);
      });
  }

  // Handle form submission and send new message to the API
  async function handleSubmit(e) {
    e.preventDefault();
    const messageInput = document.getElementById('messageInput');
    newMessage = messageInput.value;

    try {
      const response = await fetch(`${baseUrl}api/shoutbox`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ player_name: 'Player1', message: newMessage }),
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      newMessage = '';  // Reset message input
      messageInput.value = '';  // Clear the input field
      fetchMessages();  // Fetch and refresh messages
    } catch (error) {
      console.error('Error submitting message:', error);
    }
  }

  // Fetch messages when the page is loaded
  fetchMessages();

  // Attach the form submission handler
  const shoutboxForm = document.getElementById('shoutboxForm');
  shoutboxForm.addEventListener('submit', handleSubmit);
</script>
